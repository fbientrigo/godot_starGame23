# Componente de Torreta Estrella

Este script representa el componente de una torreta estelar en un juego desarrollado en Godot. El componente está diseñado para controlar el tipo de estrella mediante un menú desplegable (`dropdown`) y utiliza una `StateMachine` para gestionar el comportamiento de la torreta en función del tipo de estrella seleccionado.

```gdscript
# Componente de Torreta Estrella
extends Node2D

# Conexión con otros nodos

# Controla el tipo de estrella mediante dropdown
@export_enum("TipoGas","TipoA","TipoB","TipoF","TipoG","TipoO","TipoK","TipoM","TipoWD","TipoRG","TipoSRG") var tipo_estrella:String = "TipoGas"

@onready var statemachine : StateMachine = $StateMachine
@onready var weaponstatemachine: WeaponStateMachine = $BasicWeaponStateMachine
@onready var light:PointLight2D = $PointLight2D

func _ready():
    # Sección de búsqueda usando enum
    var nodo_hijo = statemachine.get_node(tipo_estrella)
    if nodo_hijo:
        statemachine.initial_state = nodo_hijo
        statemachine.set_initial_state(nodo_hijo)
    else:
        print("Nodo hijo no encontrado.")

# ...

func _physics_process(delta):
    # ...

    # Comportamiento de la torreta en función del tipo de estrella
    if enemies != []:
        current_enemy = enemies[0]
        weaponstatemachine.current_state.fire(global_rotation, current_enemy.global_position, PI)
	
# ...

# ...

func evolve_tower(new_tower):
    # ...

func _on_sensor_area_entered(area):
    # ...

func _on_sensor_area_exited(area):
    # ...

var health = 3

func _on_area_2d_area_entered(area):
    health = health - 1
    if health < 0:
        queue_free()
```

## Datos de las Estrellas

El componente utiliza un diccionario llamado `DATA` para almacenar información sobre diferentes tipos de estrellas. Cada entrada en el diccionario representa un tipo de estrella con sus propiedades específicas, como masa, radio, temperatura, abundancia, y tiempo de vida.

```gdscript
# Datos de las estrellas
const DATA = {
    O=["O",50,10,40000,0.00001,10],
    B=["B",10,5,20000,0.1,100],
    A=["A",2,1.7,8500,0.7,1000],
    F=["F",1.5,1.3,6500,2,3000],
    G=["G",1,1,5700,3.5,10000],
    K=["K",0.7,0.8,4500,8,50000],
    M=["M",0.2,0.3,3200,80,20000],
    WD=["WhiteDwarf",1.4,0.001,70000,5,99999],
    GiganteRojaK = ["GiganteRojaK",5,50,10000,0.4,1000],
    GiganteRoja = ["GiganteRoja",500,500,40000,0.0001,10],
    Gas = ["Gas",1,0.5,3000,99999], # Proto
    Gas2 = ["Gas2",1,0.5,3000,99999], # Nebula
}
```

una nueva version de este script es:

## Otros Comportamientos

El script también contiene funciones para el seguimiento de enemigos, la evolución de la torreta, y reacciones a eventos de colisión.

```gdscript
# ...

func _physics_process(delta):
    # ...

func evolve_tower(new_tower):
    # ...

func _on_sensor_area_entered(area):
    # ...

func _on_sensor_area_exited(area):
    # ...

var health = 3

func _on_area_2d_area_entered(area):
    health = health - 1
    if health < 0:
        queue_free()
```

Este diseño modular y basado en una máquina de estados permite una fácil extensibilidad y mantenimiento del código. La torreta puede evolucionar y adaptarse según el tipo de estrella seleccionado y responder a eventos de juego de manera efectiva.